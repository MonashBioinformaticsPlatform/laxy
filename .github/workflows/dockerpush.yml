name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: laxy

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            GIT_SHORT_COMMIT=$(git log -1 --format=%h)
            docker-compose --file docker-compose.yml --file docker-compose.test.yml build \
                           --build-arg GIT_COMMIT=$GIT_SHORT_COMMIT
            docker-compose --file docker-compose.yml --file docker-compose.test.yml run sut
          else
            docker build . --file docker/laxy/Dockerfile
          fi

  # Push image to GitHub Package Registry.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: |
          GIT_SHORT_COMMIT=$(git log -1 --format=%h)
          docker build . --file docker/laxy/Dockerfile --tag image --build-arg GIT_COMMIT=$GIT_SHORT_COMMIT

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          GIT_SHORT_COMMIT=$(git log -1 --format=%h)
          
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag image $IMAGE_ID:$VERSION
          docker tag image $IMAGE_ID:$GIT_SHORT_COMMIT
          docker push $IMAGE_ID:$VERSION
