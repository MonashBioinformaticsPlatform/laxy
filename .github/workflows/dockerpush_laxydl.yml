name: laxy-downloader Docker build and push

on:
  workflow_dispatch:

  push:
    # Publish `master` as Docker `latest` image, `develop` as `dev` image
    branches:
      - master
      - develop

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: laxy-downloader

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build --file docker/laxy_downloader/Dockerfile --tag $IMAGE_NAME .

      - name: Run tests
        run: |
          docker run --rm --entrypoint "" $IMAGE_NAME /bin/sh -c "pip install pytest && pytest"

  push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build --file docker/laxy_downloader/Dockerfile --tag $IMAGE_NAME .

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          function to_lower() {
            echo $1 | tr '[:upper:]' '[:lower:]'
          }

          IMAGE_ID=$(to_lower "docker.pkg.github.com/${{ github.repository }}/${IMAGE_NAME}")

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          [ "$VERSION" == "develop" ] && VERSION=dev

          GIT_SHORT_COMMIT=$(git log -1 --format=%h)

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          # Tag and push image
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$GIT_SHORT_COMMIT
          docker push $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$GIT_SHORT_COMMIT
