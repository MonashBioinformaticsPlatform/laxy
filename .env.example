# These settings can be passed to the app via environment variables,
# or defined in a file called .env
# See: https://django-environ.readthedocs.io

LAXY_DEBUG=yes
# Enables Django and Docker compose options to use SSL/TLS (https).
# Certificates are acquired via Let's Encrypt in http-01 mode automatically,
# so you'll need a real domain name pointing to the running app (defined below)
# before enabling this option.
LAXY_USE_SSL=no

# Django secret key, used for signing/encrypting cookies, JWT tokens, etc
LAXY_SECRET_KEY=bl4f00_s3cretk3y_should_be_nice_and_long_4lso_h4rd_2_gue55

# SQLite isn't supported
# LAXY_DATABASE_URL=sqlite:///db.sqlite3

LAXY_DATABASE_URL=postgres://postgres:postgres@localhost:5432/laxy_db
LAXY_BROKER_URL=amqp://guest@localhost

#### WARNING: Don't commit these to a repo if defined in a file !
# the secret key is automatically generated in .secret_key if left undefined
# LAXY_SECRET_KEY=X123456789X
LAXY_AWS_ACCESS_KEY_ID=NOPENOT4UASDF
LAXY_AWS_SECRET_ACCESS_KEY=SUP3RS3CR3TK3YUC4N7S33
LAXY_EMAIL_HOST_PASSWORD=s333ccrr333tt!!
####

LAXY_EMAIL_HOST_URL=smtp+tls://smtp.mailgun.org:587
LAXY_EMAIL_HOST_USER=postmaster@example.com

# LAXY_STATIC_ROOT=/www/html/myapp/static
LAXY_ALLOWED_HOSTS=localhost,example.com

# These values must be acquired from Google, eg via a project at:
# https://console.developers.google.com/apis/credentials
LAXY_SOCIAL_AUTH_GOOGLE_OAUTH2_KEY=blaf00BigMess.apps.googleusercontent.com
LAXY_SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET=SomeLongSecretFromGoogle

# The high-level domain the frontend will be served from must be set here
# The CSRF cookie is set to this domain, allowing cross-site requests
# between subdomains (eg if you want to allow dev.laxy.io to POST to api.laxy.io).
LAXY_CSRF_COOKIE_DOMAIN=localhost

LAXY_CORS_ORIGIN_WHITELIST="localhost,laxy.example.com,laxy.example.com"

# Applies to HTTPS only
LAXY_CSRF_TRUSTED_ORIGINS="localhost,laxy.example.com"

# Only whitelisted domains can create account / login via social auth (eg Google login)
# LAXY_SOCIAL_AUTH_WHITELISTED_DOMAINS="mycompany.example.com,nsa.gov"
# LAXY_SOCIAL_AUTH_WHITELISTED_EMAILS="torst@example.com"

# For sentry.io error tracking. Leave these blank to disable
# From Client Keys (DSN): https://{LAXY_SENTRY_KEY}@sentry.io/{LAXY_SENTRY_PROJECT}
LAXY_SENTRY_DSN=https://s0meh3xk3yth1ng@sentry.io/1234567

# A JSON formatted dictionary mapping email address domains to allowed compute resources.
# "*" wildcard means any domain or compute resource (this isn't a regex / glob).
# Order of the ComputeResource names in the list doesn't matter - which one is chosen depends on
# ComputeResource.priority (and maybe other factors).
# Note that if you are using Django local accounts without email address validation the allowed
# compute resource restriction can easily be circumvented.
LAXY_EMAIL_DOMAIN_ALLOWED_COMPUTE = '{"mydomain.com": ["*"], "important.edu.au": ["fast_hpc", "other_hpc"], "gmail.com": ["slow_cloud"], "clinicalpeeps.com": ["extra_secure"], "*": ["slow_cloud"]}'

################################################################################
# For frontend build (Webpack)

# The client ID obtained here: https://console.developers.google.com/apis/credentials
LAXY_FRONTEND_GOOGLE_OAUTH_CLIENT_ID=some-client-id-from-google.apps.googleusercontent.com

# For Google OAuth2, LAXY_FRONTEND_URL URL must also be registered as a valid redirect_url here:
# https://console.developers.google.com/apis/credentials
# Leave LAXY_FRONTEND_URL and LAXY_FRONTEND_API_URL unset in local env dev to builds.
# When unset, the frontend defaults to building with endpoints http://localhost:8002 and http://localhost:8001
# LAXY_FRONTEND_URL=http://localhost:8002
# LAXY_FRONTEND_API_URL=http://localhost:8001

################################################################################
# For Docker Compose
# LAXY_DATABASE_URL=postgres://postgres:postgres@db:5432
# LAXY_BROKER_URL=amqp://guest@rabbitmq

LAXY_ADMIN_EMAIL=admin@example.com
LAXY_ADMIN_USERNAME=admin
LAXY_ADMIN_PASSWORD=adminpass

POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=postgres
PGDATA=/var/lib/postgresql/data/pgdata

FLOWER_BASIC_AUTH=user:pass

# Space separated list, passed to Let's Encrypt acme-client in ssl-certs-cron service/container
ACME_SSL_DOMAINS=example.com laxy.example.com

# username:password must be hashed with htpasswd like:
# htpasswd -nb -B admin <password> | cut -d ":" -f 2
# https://portainer.readthedocs.io/en/stable/configuration.html#admin-password
PORTAINER_ADMIN_PASSWORD=$2y$05$ypQ42R9BcD4cV6GA0edGUOAcaS58iT7KWPN1oGJ/CZ6gij5bAwN/G
