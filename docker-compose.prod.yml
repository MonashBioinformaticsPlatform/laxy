version: '3.7'

networks:
  private:

volumes:
  static_assets:
  certs:
  dbdata:

services:

  django:
    image: "${IMAGE_REPO-docker.pkg.github.com/monashbioinformaticsplatform/laxy}/laxy:latest"
    # user: laxy
    # We must specify the .env file so that it gets sourced - otherwise every variable in .env would
    # need to be explicitly defined like: LAXY_DEBUG=${LAXY_DEBUG} in the environment section below.
    env_file:
      - .env
    environment:
      - LAXY_DEBUG=no
      - LAXY_STATIC_ROOT=/usr/share/nginx/html/backend_static
      - LAXY_STATIC_URL=${LAXY_FRONTEND_URL-//laxy.io}/backend_static/
      # Number of gunicorn workers
      - WEB_CONCURRENCY=${WEB_CONCURRENCY-4}
    deploy:
      mode: replicated
      replicas: 3
      restart_policy:
        condition: any
    volumes:
      - static_assets:/usr/share/nginx/html
    # Internal Docker network only
    expose:
      - "8001"
    # Publicly accessible
    # ports:
    #   - "8001:8001"
    networks:
      - private
    command: bash -c "sleep 10 &&
                      mkdir -p '${LAXY_STATIC_ROOT:-/usr/share/nginx/html/backend_static}' &&
                      cp -r /app/laxy_frontend/dist/* /usr/share/nginx/html/ &&
                      python3 manage.py makemigrations --no-input &&
                      python3 manage.py migrate --no-input &&
                      python3 manage.py collectstatic --no-input &&
                      gunicorn laxy.wsgi -b 0.0.0.0:8001 --forwarded-allow-ips='*' --worker-class gevent"

  dev-frontend-server:
    image: "${IMAGE_REPO-docker.pkg.github.com/monashbioinformaticsplatform/laxy}/laxy:latest"
    restart: "no"
    command: echo "Service disabled in prod (but still required to be defined to override the image name)"

  db:
    env_file:
      - .env
#    environment:
#      - POSTGRES_USER="${POSTGRES_USER}"
#      - POSTGRES_PASSWORD="${POSTGRES_PASSWORD}"
#      - POSTGRES_DB="${POSTGRES_DB}"
#      - PGDATA="${PGDATA}"
    deploy:
      restart_policy:
        condition: any
      # We always place the db container on the manager node so it
      # will be located with it's persistent volume container 'dbdata'
      placement:
        constraints: [node.role == manager]
    networks:
      - private

  rabbitmq:
    deploy:
      restart_policy:
        condition: any
    networks:
      - private

  celeryd:
    image: "${IMAGE_REPO-docker.pkg.github.com/monashbioinformaticsplatform/laxy}/laxy:latest"
    # user: laxy
    # command: bash -c "celery -A laxy worker -B -E -l info --broker=${LAXY_BROKER_URL}"
    env_file:
      - .env
    environment:
      - LAXY_DEBUG=no
    deploy:
      mode: replicated
      replicas: 3
      restart_policy:
        condition: any
    networks:
      - private

  flower:
    image: "${IMAGE_REPO-docker.pkg.github.com/monashbioinformaticsplatform/laxy}/laxy:latest"
    env_file:
      - .env
    environment:
      - LAXY_DEBUG=no
    deploy:
      restart_policy:
        condition: any
      # - FLOWER_BASIC_AUTH=${FLOWER_USER:?must_set_FLOWER_USER_env_var}:${FLOWER_PASS:?must_set_FLOWER_PASS_env_var}
    ports:
      - "5556:5556"
    networks:
      - private

  nginx:
    command: >
      sh -c "
        echo -e '#!/bin/sh\n/usr/sbin/nginx -s reload' >/etc/periodic/daily/nginx-reload-config &&
        chmod +x /etc/periodic/daily/nginx-reload-config &&

        until [ -f /certs/fullchain.pem ] && [ -f /certs/key.pem ]; do
          echo `date`': Waiting for SSL certificates ..';
          sleep 5;
        done;

        /usr/sbin/nginx -g 'daemon off;'
      "
    deploy:
      restart_policy:
        condition: any
    ports:
      # we need port 80 so nginx can redirect to 443, also for Let's Encrypt http-01 challenge
      - "80:80"
      - "443:443"
    depends_on:
      - ssl-certs-cron
    networks:
      - private
    volumes:
       - static_assets:/usr/share/nginx/html:ro
       - certs:/certs:ro
       - ./nginx.conf:/etc/nginx/nginx.conf:ro

  ssl-certs-cron:
    image: "${IMAGE_REPO-docker.pkg.github.com/monashbioinformaticsplatform/laxy}/ssl-certs:latest"
    environment:
      # No quotes !
      - ACME_SSL_DOMAINS=${ACME_SSL_DOMAINS-laxy.io api.laxy.io}
      - LAXY_ADMIN_EMAIL=${LAXY_ADMIN_EMAIL-}
    # Run certificate renewel/creation on startup if missing. Then run crond in foreground forever.
#    command: >
#      /bin/bash -c "
#        [[ ! -f /certs/key.pem ]] && \
#        cron && \
#        anacron && \
#        touch /var/log/ssl-certs-cron.log && \
#        tail -f /var/log/ssl-certs-cron.log
#      "
    deploy:
      restart_policy:
        delay: 5s
        max_attempts: 3
        window: 120s
    volumes:
      # we need to write access to allow /usr/share/nginx/html creation of .well-known/acme-challenge for
      # Let's Encrypt the http-01 challenge
      - static_assets:/usr/share/nginx/html
      - certs:/certs
  splash:
    networks:
      - private

##
##  shell-notebook is disabled by default on prod, but can be enabled here
##  temporarily if required for specific debugging or manual data migration tasks
##
  # Examine the logs to find the token to login to the Jupyter notebook
  # (eg docker-compose logs -f docker-compose.yml -f docker-compose.dev.yml shell-notebook )
#  shell-notebook:
#    build:
#      context: .
#      dockerfile: ./docker/laxy/Dockerfile
#    environment:
#      - LAXY_DEBUG=no
#      - LAXY_SENTRY_DSN=
#    env_file:
#      - .env
#    ports:
#      - "8999:8999"
#    logging:
#      driver: "json-file"
#      options:
#        max-size: "100k"
#        max-file: "1"
#    depends_on:
#      - db
#    networks:
#      - private
#    command: bash -c "sleep 10 &&
#      pip3 install jupyter ipython ipykernel django-extensions &&
#      python3 manage.py shell_plus --notebook"
