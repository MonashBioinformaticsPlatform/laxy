version: '3.2'

networks:
  private:

volumes:
  static:
  dbdata:

services:

  django:
    deploy:
      restart_policy:
        condition: any
    environment:
      - LAXY_DEBUG=no
      - LAXY_STATIC_ROOT=/usr/share/nginx/html/backend
      - LAXY_STATIC_URL=/backend/
    volumes:
      -  static:/usr/share/nginx/html
# TODO: Make Django only accessible from the private Docker network, via
#       'expose' rather than 'ports', reverse proxy via nginx config
#   expose:
#     - "8001:8001"
    ports:
      - "8001:8001"
    networks:
      - private
    command: bash -c "sleep 10 &&
                      python3 manage.py makemigrations --no-input &&
                      python3 manage.py migrate --no-input &&
                      mkdir -p /usr/share/nginx/html/backend &&
                      python3 manage.py collectstatic --no-input &&
                      cp -r /app/laxy_frontend/* /usr/share/nginx/html &&
                      gunicorn laxy.wsgi -b 0.0.0.0:8001"

  db:
    deploy:
      restart_policy:
        condition: any
      # We always place the db container on the manager node so it
      # will be located with it's persistent volume container 'dbdata'
      placement:
        constraints: [node.role == manager]
    networks:
      - private

  rabbitmq:
    deploy:
      restart_policy:
        condition: any
    networks:
      - private

  celeryd:
    # command: bash -c "celery -A laxy worker -B -E -l info --broker=${LAXY_BROKER_URL}"
    environment:
      - LAXY_DEBUG=no
    deploy:
      restart_policy:
        condition: any
    networks:
      - private

  flower:
    deploy:
      restart_policy:
        condition: any
    environment:
      - LAXY_DEBUG=no
      - FLOWER_BASIC_AUTH=user:pass
    ports:
      - "5556:5556"
    networks:
      - private

  nginx:
    deploy:
      restart_policy:
        condition: any
    ports:
      # production
      - "80:80"
    networks:
      - private
    volumes:
       - static:/usr/share/nginx/html:ro
